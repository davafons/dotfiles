" UI Configuration
set cursorline                          " Highlight current line
set showcmd                             " Show commands as its typed
set wildmenu                            " Visual autocomplete for command menu
set showmatch                           " Show matching parenthesis
set laststatus=2                        " Always display status line
set noshowmode                          " Don't show INSERT, NORMAL modes
set visualbell                          " No error beep
set number relativenumber               " Hybrid number line

" Plugins
set commentary                          " Comment lines with gc
set surround                            " Mappings to change braces
set highlightedyank                     " Brief highlight after yank
set nerdtree                            " Navigable project tree
set sneak                               " Motion with s and two chars

" Search
set incsearch                           " Search as you type
set hlsearch                            " Highlight all results
set ignorecase                          " Ignore case on search
set smartcase                           " Search input is case aware

let mapleader=","

" Faster window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Tab navigation
nnoremap <A-j> :tabnext<CR>
nnoremap <A-k> :tabprev<CR>

" Jump between methods
nnoremap [[ <Action>(MethodUp)
nnoremap ]] <Action>(MethodDown)

" Popup navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Use system clipboard with leader
noremap <Leader>y "+y
noremap <Leader>p "+p

" Disable search highlight
nnoremap <Leader><Space> :nohlsearch<CR>

" Close active tab
nnoremap <Action>q <Action>(CloseContent)

" Esc with C-c
inoremap <C-c> <Esc>

" Shortcuts for split window
map <Leader>s <Action>(SplitVertically)
map <Leader>S <Action>(SplitHorizontally)

" Actions
map <Leader>am <Action>(ShowIntentionActions)
map <Leader>as <Action>(SearchEverywhere)

" File navigation
map <Leader>df <action>(GotoFile)
map <Leader>dr <action>(RecentFiles)
map <Leader>dc <action>(FindInPath)
map <Leader><Leader> <Action>(FindInPath)
map <Leader>dl <action>(RecentLocations)
map <Leader>ds <action>(NewScratchFile)

" Refactoring
map <Leader>rn <Action>(RenameElement)
map <Leader>rm <Action>(ExtractMethod)
map <Leader>rv <Action>(IntroduceVariable)
map <Leader>rf <Action>(IntroduceField)
map <Leader>rs <Action>(ChangeSignature)
map <Leader>rr <Action>(Refactorings.QuickListPopupAction)

" Go to code
nmap <Leader>gd <Action>(GotoDeclaration)
nmap <Leader>gy <Action>(GotoTypeDeclaration)
nmap <Leader>gi <Action>(GotoImplementation)
nmap <Leader>gu <Action>(ShowUsages)
nmap <Leader>gt <Action>(GotoTest)
nmap <Leader>gb <Action>(Back)
nmap <Leader>gf <Action>(Forward)
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)

" Git windows
map <Leader>bc <Action>(CheckinProject)
map <Leader>bs <Action>(ActivateVersionControlToolWindow)
map <Leader>bb <Action>(Git.Branches)

" Errors
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)

" NERDTree
nnoremap <Leader>f :NERDTreeToggle<CR>
nnoremap <Leader>v :NERDTreeFind<CR>
