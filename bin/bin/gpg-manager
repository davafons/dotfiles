#!/bin/bash

# GPG Key Manager using Bitwarden CLI
# Manages GPG keys securely through Bitwarden vault

set -e

# Configuration
BW_GPG_FOLDER="GPG Keys"
SCRIPT_NAME="$(basename "$0")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ ${NC}$1"
}

log_success() {
    echo -e "${GREEN}✓ ${NC}$1"
}

log_warning() {
    echo -e "${YELLOW}⚠ ${NC}$1"
}

log_error() {
    echo -e "${RED}✗ ${NC}$1"
}

# Check if Bitwarden CLI is installed and logged in
check_bitwarden() {
    if ! command -v bw &> /dev/null; then
        log_error "Bitwarden CLI (bw) is not installed."
        log_info "Install it from: https://bitwarden.com/help/cli/"
        exit 1
    fi
    
    if ! bw status | grep -q '"status":"unlocked"'; then
        log_error "Bitwarden vault is not unlocked."
        log_info "Run 'bw login' and 'bw unlock' first."
        exit 1
    fi
}

# Get or create GPG folder in Bitwarden
get_gpg_folder_id() {
    local folder_id
    folder_id=$(bw list folders | jq -r --arg name "$BW_GPG_FOLDER" '.[] | select(.name == $name) | .id')
    
    if [[ -z "$folder_id" || "$folder_id" == "null" ]]; then
        log_info "Creating '$BW_GPG_FOLDER' folder in Bitwarden..."
        folder_id=$(echo "{\"name\":\"$BW_GPG_FOLDER\"}" | bw encode | bw create folder | jq -r '.id')
        log_success "Created folder with ID: $folder_id"
    fi
    
    echo "$folder_id"
}

# List all GPG keys in the system
list_local_keys() {
    log_info "GPG keys available for upload:"
    echo ""
    echo "Public keys:"
    gpg --list-public-keys --keyid-format LONG 2>/dev/null || echo "No public keys found"
    echo ""
    echo "Private keys:"
    gpg --list-secret-keys --keyid-format LONG 2>/dev/null || echo "No private keys found"
}

# List GPG keys stored in Bitwarden
list_bitwarden_keys() {
    check_bitwarden
    
    log_info "GPG keys stored in Bitwarden:"
    echo ""
    
    local folder_id
    folder_id=$(get_gpg_folder_id)
    
    local items
    items=$(bw list items --folderid "$folder_id" 2>/dev/null || echo "[]")
    
    if [[ "$(echo "$items" | jq '. | length')" -eq 0 ]]; then
        echo "No GPG keys found in Bitwarden vault."
        return
    fi
    
    echo "$items" | jq -r '.[] | "  • \(.name) (ID: \(.id))"'
}

# Upload GPG key to Bitwarden
upload_key() {
    local key_id="$1"
    if [[ -z "$key_id" ]]; then
        log_error "Key ID is required"
        echo "Usage: $SCRIPT_NAME upload <key-id>"
        echo "Use '$SCRIPT_NAME list-local' to see available keys"
        exit 1
    fi
    
    check_bitwarden
    
    # Verify key exists
    if ! gpg --list-secret-keys "$key_id" &>/dev/null; then
        log_error "Private key '$key_id' not found in local keyring"
        exit 1
    fi
    
    log_info "Uploading GPG key $key_id to Bitwarden..."
    
    local folder_id
    folder_id=$(get_gpg_folder_id)
    
    # Get key info for naming
    local key_info
    key_info=$(gpg --list-secret-keys --keyid-format LONG "$key_id" 2>/dev/null | head -n 5)
    local key_name="GPG-$key_id"
    
    # Export public key
    local public_key
    public_key=$(gpg --armor --export "$key_id" 2>/dev/null)
    
    # Export private key
    local private_key
    private_key=$(gpg --armor --export-secret-key "$key_id" 2>/dev/null)
    
    if [[ -z "$public_key" || -z "$private_key" ]]; then
        log_error "Failed to export keys for $key_id"
        exit 1
    fi
    
    # Create Bitwarden item using simplified approach - store only private key like reference script
    local notes_content
    notes_content="GPG Key: $key_id"$'\n\n'"Key Info:"$'\n'"$(echo "$key_info" | head -3)"$'\n\n'"--- PRIVATE KEY ---"$'\n'"$private_key"$'\n\n'"Note: Public key can be derived from private key or downloaded from keyservers."
    
    local item_json
    item_json=$(jq -n \
        --arg name "$key_name" \
        --arg notes "$notes_content" \
        --arg folderId "$folder_id" \
        '{
            organizationId: null,
            folderId: $folderId,
            type: 2,
            name: $name,
            notes: $notes,
            favorite: false,
            fields: [],
            secureNote: {
                type: 0
            }
        }')
    
    # Upload to Bitwarden using the reference script approach
    log_info "JSON size: $(printf '%s' "$item_json" | wc -c) characters"
    local result
    result=$(printf '%s' "$item_json" | base64 -w 0 | bw create item 2>&1)
    
    if [[ $? -eq 0 ]]; then
        local item_id
        item_id=$(echo "$result" | jq -r '.id')
        log_success "GPG key $key_id uploaded to Bitwarden (Item ID: $item_id)"
    else
        log_error "Failed to upload GPG key to Bitwarden"
        log_error "$result"
        exit 1
    fi
}

# Download and import GPG key from Bitwarden
download_key() {
    local item_name="$1"
    if [[ -z "$item_name" ]]; then
        log_error "Item name is required"
        echo "Usage: $SCRIPT_NAME download <item-name>"
        echo "Use '$SCRIPT_NAME list-bitwarden' to see available keys"
        exit 1
    fi
    
    check_bitwarden
    
    log_info "Downloading GPG key '$item_name' from Bitwarden..."
    
    local folder_id
    folder_id=$(get_gpg_folder_id)
    
    # Find the item
    local item
    item=$(bw list items --folderid "$folder_id" | jq -r --arg name "$item_name" '.[] | select(.name == $name)')
    
    if [[ -z "$item" || "$item" == "null" ]]; then
        log_error "GPG key '$item_name' not found in Bitwarden"
        exit 1
    fi
    
    # Get item details
    local item_id
    item_id=$(echo "$item" | jq -r '.id')
    local item_details
    item_details=$(bw get item "$item_id")
    local notes
    notes=$(echo "$item_details" | jq -r '.notes // ""')
    
    if [[ -z "$notes" ]]; then
        log_error "No key data found in Bitwarden item"
        exit 1
    fi
    
    # Extract private key from notes (handle multiple formats)
    local private_key
    
    if echo "$notes" | grep -qF "--- PRIVATE KEY (BASE64) ---"; then
        # Base64 encoded private key
        local private_key_b64
        private_key_b64=$(echo "$notes" | sed -n '/--- PRIVATE KEY (BASE64) ---/,/^Note:/p' | sed '1d;$d')
        private_key=$(echo "$private_key_b64" | base64 -d)
    elif echo "$notes" | grep -qF "--- PUBLIC KEY ---"; then
        # Old format with both keys
        private_key=$(echo "$notes" | sed -n '/--- PRIVATE KEY ---/,$p' | sed '1d')
    else
        # New format with only private key
        private_key=$(echo "$notes" | sed -n '/--- PRIVATE KEY ---/,/^Note:/p' | sed '1d;$d')
    fi
    
    if [[ -z "$private_key" ]]; then
        log_error "Could not extract private key from Bitwarden item"
        exit 1
    fi
    
    # Import private key (which includes the public key)
    log_info "Importing private key..."
    if echo "$private_key" | gpg --import 2>/dev/null; then
        log_success "Private key imported successfully"
        log_info "Public key is automatically available from the private key"
    else
        log_warning "Private key may already exist or import failed"
    fi
    
    log_success "GPG key '$item_name' downloaded and imported"
}

# Delete GPG key from Bitwarden
delete_key() {
    local item_name="$1"
    if [[ -z "$item_name" ]]; then
        log_error "Item name is required"
        echo "Usage: $SCRIPT_NAME delete <item-name>"
        echo "Use '$SCRIPT_NAME list-bitwarden' to see available keys"
        exit 1
    fi
    
    check_bitwarden
    
    local folder_id
    folder_id=$(get_gpg_folder_id)
    
    # Find the item
    local item
    item=$(bw list items --folderid "$folder_id" | jq -r --arg name "$item_name" '.[] | select(.name == $name)')
    
    if [[ -z "$item" || "$item" == "null" ]]; then
        log_error "GPG key '$item_name' not found in Bitwarden"
        exit 1
    fi
    
    local item_id
    item_id=$(echo "$item" | jq -r '.id')
    
    # Confirm deletion
    read -p "Are you sure you want to delete '$item_name' from Bitwarden? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Deletion cancelled"
        exit 0
    fi
    
    # Delete from Bitwarden
    if bw delete item "$item_id" >/dev/null 2>&1; then
        log_success "GPG key '$item_name' deleted from Bitwarden"
    else
        log_error "Failed to delete GPG key from Bitwarden"
        exit 1
    fi
}

# Show help
show_help() {
    echo "GPG Key Manager using Bitwarden CLI"
    echo ""
    echo "Usage: $SCRIPT_NAME <command> [arguments]"
    echo ""
    echo "Commands:"
    echo "  list-local              List GPG keys available locally for upload"
    echo "  list-bitwarden          List GPG keys stored in Bitwarden"
    echo "  upload <key-id>         Upload GPG key to Bitwarden"
    echo "  download <item-name>    Download and import GPG key from Bitwarden"
    echo "  delete <item-name>      Delete GPG key from Bitwarden"
    echo "  help                    Show this help message"
    echo ""
    echo "Prerequisites:"
    echo "  • Bitwarden CLI installed (https://bitwarden.com/help/cli/)"
    echo "  • Logged in and unlocked: 'bw login && bw unlock'"
    echo "  • jq installed for JSON processing"
    echo ""
    echo "Examples:"
    echo "  $SCRIPT_NAME list-local"
    echo "  $SCRIPT_NAME upload 1234ABCD"
    echo "  $SCRIPT_NAME list-bitwarden"
    echo "  $SCRIPT_NAME download GPG-1234ABCD"
}

# Main command parsing
case "${1:-}" in
    list-local)
        list_local_keys
        ;;
    list-bitwarden)
        list_bitwarden_keys
        ;;
    upload)
        upload_key "$2"
        ;;
    download)
        download_key "$2"
        ;;
    delete)
        delete_key "$2"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        log_error "Unknown command: ${1:-}"
        echo ""
        show_help
        exit 1
        ;;
esac
